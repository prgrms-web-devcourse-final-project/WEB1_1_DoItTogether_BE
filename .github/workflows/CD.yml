name: ✨ Doto backend DEV CD ✨

env:
  PROFILE: default
  DOCKER_HUB_REPOSITORY: eundeang/doto-dev

# 워크플로우 실행 조건
on:
  workflow_dispatch:
  push:
    branches:
      - release
    paths:
      - "**"
      - ".github/workflows/CD.yml"

jobs:
  # 깃허브에서 제공하는 최신 우분투 서버에서 실행
  backend-docker-build-and-push:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      - name: ✨ Checkout repository
        # 깃헙 액션스의 필수 액션 중 하나, 장소의 코드를 런너 환경으로 다운로드
        uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.ACTION_TOKEN }}
      
      - name: ✨ JDK 17 설정
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: ✨ Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: ✨ Gradlew 권한 설정
        run: chmod +x ./gradlew

      - name: ✨ Jar 파일 빌드
        run: ./gradlew bootJar

      - name: ✨ DockerHub에 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # 루트를 빌드컨텍스트로 사용하고, Dockerfile-dev로 이미지를 빌드하고 도커허브에 푸시
      - name: ✨ Docker Image 빌드 후 DockerHub에 Push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile-dev
          push: true
          platforms: linux/arm64
          tags: ${{ env.DOCKER_HUB_REPOSITORY }}:latest

  # self-hosted로 설정된 개발용 서버에서 실행, 이전 job이 성공적으로 실행되었을 경우 실행
  backend-docker-pull-and-run:
    runs-on: [self-hosted, dev]
    if: ${{ needs.backend-docker-build-and-push.result == 'success' }}
    needs: [backend-docker-build-and-push]
    steps:
      - name: ✨ 배포 스크립트 실행
        run: |
          sh /home/ubuntu/deploy.sh
